<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="extending-the-application-context"
	xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:ns4="http://www.w3.org/1998/Math/MathML"
	xmlns:ns3="http://www.w3.org/2000/svg">
	<title>Extending the application context</title>

	<sect1 xml:id="factory-objects">
		<title>Factory objects</title>
		<para> The <literal>IFactoryObject</literal> interface is to be implemented by objects
				that <emphasis role="italic">are themselves factories</emphasis>.</para>
		<para>he <literal>IFactoryObject</literal> interface is a point of pluggability into the Spring
			Actionscript <abbrev>IoC</abbrev> containers instantiation logic. If you have some complex
			initialization code that is better expressed in Actionscript as opposed to a (potentially)
			verbose amount of <abbrev>XML</abbrev>, you can create your own
				<literal>IFactoryObject</literal>, write the complex initialization inside that class, and
			then plug your custom <literal>IFactoryObject</literal> into the container.</para>
		<para>Now when you request an instance of such an <literal>IFactoryObject</literal> from the
			container, it doesn't actually return an <literal>IFactoryObject</literal> instance, instead,
			it calls the <emphasis role="italic">getObject()</emphasis> method on the object and returns
			the result of this method.</para>
		<para>The <literal>IFactoryObject</literal> interface provides three methods:<itemizedlist>
				<listitem>
					<para> getObject():*; has to return an instance of the object this factory creates. The
						instance can possibly be shared (depending on whether this factory returns singletons or
						prototypes).</para>
				</listitem>
				<listitem>
					<para> isSingleton():Boolean; has to return true if this <literal>IFactoryObject</literal>
						returns singletons, false otherwise.</para>
				</listitem>
				<listitem>
					<para> getObjectType():Class; has to return either the object type returned by the
						getObject() method or null if the type isn't known in advance.</para>
				</listitem>
			</itemizedlist></para>
		<para>Let's say we need to instantiate an object of class
				<literal>IncrediblyComplicatedObject</literal>. The initialization of this object involves
			some kind of logic that is beyond the scope of Spring Actionscript and way too complicated to
			be expressed in <abbrev>XML</abbrev>. We are of course able to write our own code to perform
			this. We can now build an <literal>IFactoryObject</literal> that implements this task:</para>
		<programlisting language="actionscript">public class IncrediblyComplicatedObjectFactory implements IFactoryObject {

	public function getObject():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}

	public function getObjectType():Class {
		return IncrediblyComplicatedObject;
	}

	public function get isSingleton():Boolean {
		return false;
	}

}</programlisting>
		<para>The <emphasis role="italic">isSingleton()</emphasis> method returns false, this means that
			every time this <literal>IFactoryObject</literal> is requested from the container, it creates
			a new instance of <literal>IncrediblyComplicatedObject</literal>. When set to <emphasis
				role="bold">true</emphasis> it will create an instance once, and return this on every
			subsequent call. (At least, if the interface is properly implemented :) ).</para>
		<para>In order to use an <literal>IFactoryObject</literal> in your application, include it as an
			object in your application
			context:<programlisting language="xml">&lt;object class="com.myclasses.factories.IncrediblyComplicatedObjectFactory" id="incrediblyComplicatedObject"/></programlisting></para>
		<para><abbrev>MXML</abbrev> configuration:</para>
		<programlisting language="xml">&lt;sas:Object clazz="{IncrediblyComplicatedObjectFactory}" id="incrediblyComplicatedObject"/></programlisting>
		<para>Metadata configuration:</para>
		<programlisting language="actionscript">[Component(id="incrediblyComplicatedObject")]
public class IncrediblyComplicatedObjectFactory {
	// implementation omitted
}</programlisting>
		<para> After that, requesting an instance of <literal>IncrediblyComplicatedObject</literal> is
			the same as requesting any other ordinary object from the container: </para>
		<programlisting language="actionscript">var complicated:IncrediblyComplicatedObject = applicationContext.getObject("incrediblyComplicatedObject") as IncrediblyComplicatedObject;</programlisting>
		<para>Finally, there is sometimes a need to ask a container for an actual
				<literal>IFactoryObject</literal> instance itself, not the object it produces. This may be
			achieved by prepending the object id with '<emphasis role="bold">&amp;</emphasis>' (sans
			quotes) when calling the <emphasis role="italic">getObject()</emphasis> method of the
			ObjectFactory (including ApplicationContext). So for a given <literal>IFactoryObject</literal>
			with an id of <emphasis role="bold">myObject</emphasis>, invoking <emphasis role="italic"
					>getObject("<emphasis role="bold">myObject</emphasis>")</emphasis> on the container will
			return the product of the <literal>IFactoryObject</literal>, but invoking <emphasis
				role="italic">getObject("<emphasis role="bold">&amp;myObject</emphasis>")</emphasis> will
			return the <literal>IFactoryObject</literal> instance itself.</para>
		<sect2>
			<title>A factory object wrapper</title>
			<para>Having to implement the <literal>IFactoryObject</literal>, naturally, adds an
				unneccessary dependency on the Spring Actionscript framework. It is therefore also possible
				to mark a factory as such in the <abbrev>XML</abbrev> configuration without it having to
				implement the <literal>IFactoryObject</literal> interface.</para>
			<para>Let's first create a factory object that looks like this:</para>
			<programlisting>public class IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject {

	public function createNewInstance():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}
}</programlisting>
			<para>Now add this namespace handler to the
				<literal>XMLApplicationContext</literal>:<programlisting language="actionscript">xmlApplicationContext.addNamespaceHandler(new UtilNamespaceHandler());</programlisting></para>
			<para>In the <abbrev>XML</abbrev> configuration, add this namespace:</para>
			<programlisting>xmlns:util='http://www.springactionscript.org/schema/util'</programlisting>
			<para>Now add the factory object to the configuration like this:</para>
			<programlisting language="xml">&lt;util:factory
	factory-method="createNewInstance"
	class="com.myclasses.factories.IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject"
	id="incrediblyComplicatedObject"/></programlisting>
			<para>Internally this factory instance will be wrapped in a
					<literal>GenericFactoryObject</literal> instance which itself is an
					<literal>IFactoryObject</literal> implementation.</para>
			<para>In metadata it's a lot easier to implement, simply annotate your factory object with the
				follwoing metadata:</para>
			<programlisting language="actionscript">[Factory(factoryMethod="createNewInstance")]
public class IncrediblyComplicatedObjectFactoryThatDoesNotImplementIFactoryObject {
	public function createNewInstance():* {
		var instance:IncrediblyComplicatedObject = new IncrediblyComplicatedObject();
		//creation logic ommitted
		return instance;
	}
}</programlisting>
		</sect2>
	</sect1>
	<sect1 xml:id="object-post-processors">
		<title>Object post-processors</title>
		<para>The extension point that we will look at in this section is the
				<literal>IObjectPostProcessor</literal> interface. This interface defines a number of
			callback methods that you as an application developer can implement in order to provide your
			own (or override the containers default) instantiation logic, dependency-resolution logic, and
			so forth. If you want to do some custom logic after the Spring Actionscript container has
			finished instantiating, configuring and otherwise initializing an object, you can plug in one
			or more <literal>IObjectPostProcessor</literal> implementations.</para>
		<note>
			<para><literal>IObjectPostProcessors</literal> operate on object instances; that is to say,
				the Spring Actionscript <abbrev>IoC</abbrev> container will have instantiated an object
				instance for you, and then <literal>IObjectPostProcessors</literal> get a chance to do their
				stuff. If you want to change the actual object definition (that is the recipe that defines
				the object), then you rather need to use an <literal>IObjectFactoryPostProcessor</literal>
				(described below in the section entitled '<literal linkend="objectfactory-post-processors"
					>Objectfactory post-processors</literal>').</para>
		</note>
		<para>The <literal>IObjectPostProcessor</literal> interface consists of exactly two callback
			methods. When such a class is registered as a post-processor with the container, for each
			object instance that is created by the container, the post-processor will get a callback from
			the container both before any container initialization methods (such as <emphasis
				role="italic">afterPropertiesSet</emphasis> and any declared init method) are called, and
			also afterwards. The post-processor is free to do what it wishes with the object instance,
			including ignoring the callback completely. An object post-processor will typically check for
			callback interfaces, or do something such as wrap an object with a proxy.</para>
		<para>An <literal>ApplicationContext</literal> will automatically detect any objects which are
			defined in the configuration metadata which is supplied to it that implement the
				<literal>IObjectPostProcessor</literal> interface, and register them as post-processors, to
			be then called appropriately by the container on object creation. Nothing else needs to be
			done other than deploying the post-processors in a similar fashion to any other object.</para>
		<note>
			<para>You can force the object factory to ignore its list of
					<literal>IObjectPostProcessors</literal> for a given object definition by setting its
					<emphasis role="italic">skipPostprocessors</emphasis> property to <emphasis role="bold"
					>true</emphasis>. This will yield a small performance boost. For more check the subsection
					'<literal linkend="skippostprocessors">skipPostProcessors</literal>' of the '<literal
					linkend="object-definitions">Object Definitions</literal>' section.</para>
		</note>
		<sect2>
			<title>Creating a postprocessor</title>
			<para> Let's see how we can build our own processor. Suppose we have an
					<literal>IProductManager</literal> interface that looks like this:
				<programlisting language="actionscript">public interface IProductManager {

	function get items():ArrayCollection;
	function set items(value:ArrayCollection):void;
}</programlisting></para>
			<para>At runtime the actual items will be loaded by a server call and stored in the
				application model. Since we won't know exactly when the items will be loaded we can't use
				the <literal>FieldRetrievingFactoryObject</literal> to simply assign the model's items to
				the items property of the <literal>IProductManager</literal> instance. What we'd like to do
				is actually bind the productmanager's items to the model items.</para>
			<para>Let's see if we can build something that performs this task. We will implement the
					<literal>IObjectPostProcessor</literal> interfaces like
				this:<programlisting language="actionscript">public class PropertyBindingPostProcessor implements IObjectPostProcessor {

	public function PropertyBindingPostProcessor() {
		super();
	}
 
	private var _host:Object;
	public set host(value:Object):void {
		_host = host;
	}
	private var _chain:Object;
	public set chain(value:Object):void {
		_chain = value;
	}

	public function postProcessBeforeInitialization(object:*, objectName:String):* {
		if (object is IProductManager){
			BindingUtils.bindProperty(object,'items',host,chain);
 		}
	}
 
	public function postProcessAfterInitialization(object:*, objectName:String):* {
		return null;
	}

}</programlisting></para>
			<para> Now all we need to do is add this bit of configuration and the post processor is ready
				to do its work: </para>
			<programlisting language="xml">&lt;object id="propertyBindingPostProcessor" class="com.myclasses.postprocessors.PropertyBindingPostProcessor">
	&lt;property name="host" ref="modelInstance"/>
	&lt;property name="chain" value="items"/>
&lt;/object></programlisting>
			<para><abbrev>MXML</abbrev> configuration:</para>
			<programlisting language="xml">&lt;sas:Object id="propertyBindingPostProcessor" clazz="{PropertyBindingPostProcessor}">
	&lt;sas:Property name="host" ref="{modelInstance}"/>
	&lt;sas:Property name="chain" value="items"/>
&lt;/sas:Object></programlisting>
			<para>Metadata
				configuration:<programlisting language="actionscript">[Component(id="propertyBindingPostProcessor")]
public class PropertyBindingPostProcessor implements IObjectPostProcessor {
	//Implementation ommitted
}</programlisting></para>
			<para> That's it basically it! Now its certainly possible to come up with a much more generic
				solution than this, but it does show its fairly easy to create your own post processors for
				specific tasks. </para>
		</sect2>
	</sect1>
	<sect1 xml:id="metadata-processors">
		<title>Metadata processors</title>
		<para> Spring Actionscript offers an easy way to process actionscript metadata annotations. The
			main interface of interest for this task is <literal>IMetadataProcessor</literal>.</para>
		<para> Here's what it looks like up close: </para>
		<programlisting language="actionscript">public interface IMetadataProcessor {

	function get metadataNames():Vector.&lt;String>;

	function get processBeforeInitialization():Boolean;

	function process(instance:Object, container:IMetaDataContainer, name:String, objectName:String):void;
}</programlisting>
		<para>The basic properties have already been implemented by the AbstractMetadataProcessor base
			class which can be used for convenience.</para>
		<para>Let's take a look at the various properties and methods and see what they do and
			mean.</para>
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">metadataNames</emphasis> - This is a
						<literal>Vector.&lt;String></literal> of metadata names that will trigger the <emphasis
						role="italic">process()</emphasis> method of the <literal>IMetadataProcessor</literal>
					implementation.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">processBeforeInitialization</emphasis> - When set to <emphasis
						role="bold">true</emphasis> the <literal>IMetadataProcessor</literal> instance will be
					able to process the annotated instance before it has been initialized by the Spring
					Actionscript container.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">process</emphasis> - This method will contain the processing
					logic that is associated with the various names specified by the metadataNames
					property.</para>
			</listitem>
		</itemizedlist>
		<para>The <emphasis role="italic">process()</emphasis> method will naturally be the most
			important aspect in any implementation of the <literal>IMetadataProcessor</literal> interface.
			It receives three parameters:<itemizedlist>
				<listitem>
					<para><emphasis role="bold">instance</emphasis> - This is the object instance that was
						encountered with the specified metadata name on its class or its methods or
						properties.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">container</emphasis> - The <literal>IMetaDataContainer</literal>
						that is associated with the instance, this can be any of these subclasses:
							<literal>Type</literal>, <literal>Method</literal>, <literal>Accessor</literal>,
							<literal>Constant</literal>, <literal>Variable</literal>.</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">name</emphasis> - The metadata name that triggered the
						invocation of the <emphasis role="italic">process()</emphasis> method.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">objectName</emphasis> - The name of the object definition in the
						Spring Actionscript container.</para>
				</listitem>
			</itemizedlist></para>
		<para>To use the <literal>IMetadataProcessor</literal> in an application add the implementation
			as an object definition to the application context configuration like this:</para>
		<programlisting language="xml">&lt;object id="mvcEventsProcessor" class="org.springextensions.actionscript.core.mvc.MVCRouteEventsMetaDataProcessor"/></programlisting>
		<para>After that the processor is ready to go, when used in combination with the autowiring
			stage processor (as described in the '<literal linkend="autowiring">Autowiring</literal>') it
			will process both objects created by the container and components that were added to the
			stage.</para>
		<note>
			<para>Credit where credit is due: This type of metadata handling is similar to the <literal
					xlink:href="http://www.spicefactory.org/parsley/docs/2.3/api/parsley-flex/org/spicefactory/parsley/config/ObjectDefinitionDecorator.html"
					>ObjectDefinitionDecorator</literal> in the <literal
					xlink:href="http://www.spicefactory.org/parsley/">Parsley Framework</literal> and the
				IMetadataProcessor in the <literal xlink:href="http://www.swizframework.org">Swiz
					Framework</literal>, the Spring Actionscript team both acknowledges and appreciates this
				work.</para>
			<para>Java programmers will see obvious similarities to the <literal
					xlink:href="http://download.oracle.com/javase/1.5.0/docs/guide/apt/mirror/com/sun/mirror/apt/AnnotationProcessor.html"
					>Java annotation processor</literal>.</para>
		</note>
		<sect2 xml:id="controlling-the-order-of-imetadataprocessors">
			<title>Controlling the order of IMetadataProcessors</title>
			<para>The order in which <literal>IMetadataProcessors</literal> are executed is controlled by
				the <literal>IOrdered</literal> interface. See the '<literal>Controlling collection
					order</literal>' section for more information on this interface.</para>
		</sect2>
		<sect2 xml:id="the-imetadatadestroyer-interface"><title>The IMetadataDestroyer interface</title><para>The counter-part to the <literal>IMetadataProcessor</literal> is the
					<literal>IMetadataDestroyer</literal> interface. It is meant to undo that which the
					<literal>IMetadatProcessor</literal> has done. So, if a processor has added some event
				listeners, a destroyer may remove them. The interface is fairly similar to the
					<literal>IMetadataProcessor</literal>:</para>
			<programlisting language="actionscript">public interface IMetadataDestroyer {
	function get metadataNames():Vector.&lt;String>;
	function destroy(instance:Object, container:IMetadataContainer, metadataName:String, objectName:String):void;
}</programlisting>
			<para>To enable a destroyer, simply add an object definition for it to your configuration and
				you're ready. By default the destroyers will be invoked for components that have been
				removed from the stage.</para></sect2>
	</sect1>
	<sect1 xml:id="objectfactory-post-processors">
		<title>Objectfactory post-processors</title>
		<para>The extension point covered in this section is the
				<literal>IObjectFactoryPostProcessor</literal>. The semantics of this interface are similar
			to the <literal>IObjectPostProcessor</literal>, with one major difference:
				<literal>IObjectFactoryPostProcessors</literal> operate on the object configuration
			metadata; that is, the Spring Actionscript <abbrev>IoC</abbrev> container will allow
				<literal>IObjectFactoryPostProcessors</literal> to read the configuration metadata (object
			definitions) and potentially change it before the container has actually instantiated any
			other objects.</para>
		<para> The interface is fairly simple as you can see: </para>
		<programlisting language="actionscript">public interface IObjectFactoryPostProcessor {
	function postProcessObjectFactory(objectFactory:IConfigurableListableObjectFactory):void;
}</programlisting>
		<para>In order to use an <literal>IObjectFactoryPostProcessor</literal> in your application,
			include the implementation as an object in your application context:</para>
		<programlisting language="xml">&lt;object class="com.myclasses.postprocessors.MyObjectFactoryPostProcessor" id="objectFactoryPostProcessor"/></programlisting>
		<para><abbrev>MXML</abbrev>
			configuration:<programlisting language="xml">&lt;sas:Object clazz="{MyObjectFactoryPostProcessor}" id="objectFactoryPostProcessor"/></programlisting></para>
		<para>Metadata configuration:</para>
		<programlisting language="actionscript">[Component(id="objectFactoryPostProcessor")]
public class MyObjectFactoryPostProcessor implements IObjectFactoryPostProcessor {
	//Implementation ommitted...
}</programlisting>
		<para>Now after the application context has finished loading its configuration file, and before
			it starts instantiating any objects every <literal>IObjectFactoryPostProcessor</literal> that
			was found in the configuration will be invoked by calling its <emphasis role="italic"
				>postProcessObjectFactory()</emphasis> method and passing the current
				<literal>IObjectFactory</literal> instance as the argument. The
				<literal>IObjectFactoryPostProcessor</literal> can then use the
				<literal>IObjectFactory</literal> interface to perform whatever postprocessing logic is
			necessary.</para>
	</sect1>
	<sect1 xml:id="stage-processors">
		<title>Stage object processors</title>
		<para>As you can read in the '<literal linkend="autowiring-stage-components">Autowiring stage
				components</literal>' section it is possible to intercept components after they have been
			added to the stage and perform abritrary processing on them.</para>
		<para>The logic behind this sued to be an inernal part of Spring Actionscript but since version
			2.0 it has been split off and released as an autonomous API in the <literal
				xlink:href="http://www.as3commons.org/as3-commons-stageprocessing"
				>as3commons-stageprocessing</literal> project. Please refer to the <literal
				xlink:href="http://www.as3commons.org/as3-commons-stageprocessing/introduction.html"
				>documentation section on the as3commons.org</literal> site for specific info on the
			internals.</para>
		<para>To register your own <literal>IStageObjectProcessor</literal> and/or
				<literal>IStageObjectDestroyer</literal> implementations you can add them using the
			following <abbrev>XML</abbrev> and <abbrev>MXML</abbrev> extensions.</para>
		<para><abbrev>XML</abbrev>
			configuration:<programlisting>&lt;stage:stageprocessor
	class='org.springextensions.actionscript.test.testtypes.stage.TestStageProcessor'
	object-selector='selector'/></programlisting></para>
		<para><abbrev>MXML</abbrev>
			configuration:<programlisting>&lt;sas:StageObjectProcessor
	clazz="{TestStageProcessor}"
	objectSelector="selector"/></programlisting></para>
		<para>To learn more about configuration extensions, check out the section '<literal
				linkend="extending-configuration-types">Extending configurations</literal>'.</para>
	</sect1>
	<sect1 xml:id="class-scanners">
		<title>Class scanners</title>
		<para>...</para>
	</sect1>

</chapter>
