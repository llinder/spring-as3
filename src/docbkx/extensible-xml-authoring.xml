<?xml version="1.0" encoding="UTF-8"?>
<appendix annotations="" version="5.0" xml:id="extensible_xml_authoring"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:ns5="http://www.w3.org/1998/Math/MathML"
          xmlns:ns4="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <title>Extensible XML authoring</title>

  <section xml:id="xml_schema_based_configuration_introduction">
    <title>Introduction</title>

    <para>This section is devoted to detailing how you would go about writing
    your own custom <abbrev>XML</abbrev> object definition parsers and
    integrating such parsers into the Spring Actionscript <abbrev>IoC</abbrev>
    container.</para>

    <para>To facilitate the authoring of configuration files using a
    schema-aware <abbrev>XML</abbrev> editor, Spring Actionscript's extensible
    <abbrev>XML</abbrev> configuration mechanism is based on
    <abbrev>XML</abbrev> Schema. If you are not familiar with Spring
    Actionscript's current <abbrev>XML</abbrev> configuration extensions that
    come with the standard Spring Actionscript distribution, please first read
    the appendix entitled "<link
    linkend="xml-schema-based-configuration">Appendix A, XML Schema-based
    configuration</link>."</para>

    <para>Creating new <abbrev>XML</abbrev> configuration extensions can be
    done by following these (relatively) simple steps:</para>

    <itemizedlist>
      <listitem>
        <para>Authoring an XML schema to describe your custom
        element(s).</para>
      </listitem>

      <listitem>
        <para>Coding a custom <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
        implementation (this is an easy step, don't worry).</para>
      </listitem>

      <listitem>
        <para>Coding one or more <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParser</literal>
        implementations (this is where the real work is done).</para>
      </listitem>

      <listitem>
        <para>Registering the above artifacts with Spring Actionscript (this
        too is an easy step).</para>
      </listitem>
    </itemizedlist>

    <para>What follows is a description of each of these steps. For the
    example, we will create an <abbrev>XML</abbrev> extension (a custom
    <abbrev>XML</abbrev> element) that allows us to configure objects of the
    type DateFormatter (from the Flex mx.formatters.DateFormatter package) in
    an easy manner. When we are done, we will be able to define object
    definitions of type DateFormatter like this:</para>

    <programlisting>&lt;mydatens:ddateformatter id="dateFormat" 
    format-string="MM/DD/YYYY"/&gt;</programlisting>

    <para><emphasis>(Don't worry about the fact that this example is very
    simple; much more detailed examples follow afterwards. The intent in this
    first simple example is to walk you through the basic steps
    involved.)</emphasis></para>
  </section>

  <section xml:id="authoring_the_schema">
    <title>Authoring the schema</title>

    <para>Creating an <abbrev>XML</abbrev> configuration extension for use
    with Spring Actionscript's <abbrev>IoC</abbrev> container starts with
    authoring an <abbrev>XML</abbrev> Schema to describe the extension. What
    follows is the schema we'll use to configure Date objects.</para>

    <programlisting>&lt;xsd:schema xmlns="http://www.springactionscript.org/schema/mydatens"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   targetNamespace="http://www.springactionscript.org/schema/mydatens"
   elementFormDefault="qualified"&gt;

 &lt;xsd:import namespace="http://www.springactionscript.org/schema/objects"/&gt;
 
 &lt;xsd:element name="dateformatter"&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:complexContent&gt;
      <emphasis role="bold">&lt;xsd:extension base="objects:objectType"&gt;</emphasis>
         &lt;xsd:attribute name="format-string" type="xsd:string" use="required"/&gt;
      &lt;/xsd:extension&gt;
   &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;

&lt;/xsd:schema&gt;
</programlisting>

    <para>(The emphasized line contains an extension base for all tags that
    will are an object (meaning they have an id attribute, class attribute,
    etc). We are able to use this attribute because we imported the Spring
    Actionscript-provided 'objects' namespace.)</para>

    <para>The above schema will be used to configure Date objects, directly in
    an <abbrev>XML</abbrev> application context file using the
    &lt;mydatens:dateformatter/&gt; element.</para>

    <programlisting>&lt;mydatens:dateformatter id="dateFormatter" 
    format-string="MM/DD/YYYY"/&gt;</programlisting>

    <para>Note that after we've created the infrastructure classes, the above
    snippet of <abbrev>XML</abbrev> will essentially be exactly the same as
    the following <abbrev>XML</abbrev> snippet. In other words, we're just
    creating an object in the container, identified by the name 'dateFormat'
    of type DateFormatter, with a couple of properties set.</para>

    <programlisting>&lt;object id="dateFormatter" class="mx.formatters.DateFormatter"&gt;
    &lt;property name="formatString" value="MM/DD/YYYY"/&gt;
&lt;/object&gt;</programlisting>

    <note>
      <para>The schema-based approach to creating configuration format allows
      for tight integration with an <abbrev>IDE</abbrev> that has a
      schema-aware <abbrev>XML</abbrev> editor. Using a properly authored
      schema, you can use auto completion to have a user choose between
      several configuration options defined in the enumeration.</para>
    </note>
  </section>

  <section xml:id="coding_an_inamespacehandler_implementation">
    <title>Coding an INamespaceHandler implementation</title>

    <para>In addition to the schema, we need an <literal xlink:arcrole=""
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    that will parse all elements of this specific namespace Spring
    Actionscript encounters while parsing configuration files. The <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    should in our case take care of the parsing of the mydatens:dateformatter
    element.</para>

    <para>The <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    interface is pretty simple in that it features just two methods:</para>

    <programlisting>public interface INamespaceHandler {

 <lineannotation>/**</lineannotation>
  <lineannotation>* Return the namespace supported by this namespace handler.</lineannotation>
  <lineannotation>*/</lineannotation>
 function getNamespace():Namespace;

 <lineannotation>/**
  * Parses the given node and returns the resulting object definition.
  * 
  * @param node the xml node to parse
  * @param context the root xml parser
  */</lineannotation>
 function parse(node:XML, context:XMLObjectDefinitionsParser):IObjectDefinition;

}</programlisting>

    <para>Although it is perfectly possible to code your own <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    for the entire namespace (and hence provide code that parses each and
    every element in the namespace), it is often the case that each top-level
    <abbrev>XML</abbrev> element in a Spring Actionscript <abbrev>XML</abbrev>
    configuration file results in a single object definition (as in our case,
    where a single &lt;mydatens:dateformatter/&gt; element results in a single
    DateFormatter object definition). Spring Actionscript features a number of
    convenience classes that support this scenario. In this example, we'll
    make use of the <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.NamespaceHandlerSupport">NamespaceHandlerSupport</literal>
    class:</para>

    <programlisting>package org.springextensions.actionscript.ioc.factory.xml {

 public class MyNamespaceHandler extends NamespaceHandlerSupport {

  public function MyNamespaceHandler() {
   super(new Namespace("http://www.springactionscript.org/schema/mydatens"));

   registerObjectDefinitionParser("dateformatter", new DateFormatterNodeParser());
  }

 }
}</programlisting>

    <para>The observant reader will notice that there isn't actually a whole
    lot of parsing logic in this class. Indeed... the <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.NamespaceHandlerSupport">NamespaceHandlerSupport</literal>
    class has a built in notion of delegation. It supports the registration of
    any number of <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParser</literal>
    instances, to which it will delegate to when it needs to parse an element
    in it's namespace. This clean separation of concerns allows an <literal
    wordsize=""
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    to handle the orchestration of the parsing of all of the custom elements
    in it's namespace, while delegating to <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParsers</literal>
    to do the grunt work of the <abbrev>XML</abbrev> parsing; this means that
    each <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParser</literal>
    will contain just the logic for parsing a single custom element, as we can
    see in the next step.</para>
  </section>

  <section xml:id="coding_an_iobjectdefinitionparser_implementation">
    <title>Coding an IObjectDefinitionParser implementation</title>

    <para>An <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParser</literal>
    will be used if the <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>
    encounters an <abbrev>XML</abbrev> element of the type that has been
    mapped to the specific object definition parser (which is 'dateformatter'
    in this case). In other words, the <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionParser</literal>
    is responsible for parsing one distinct top-level <abbrev>XML</abbrev>
    element defined in the schema. In the parser, we'll have access to the
    <abbrev>XML</abbrev> element (and thus it's sub elements too) so that we
    can parse our custom <abbrev>XML</abbrev> content, as can be seen in the
    following example:</para>

    <programlisting>package org.springextensions.actionscript.ioc.factory.xml {
 import mx.formatters.DateFormatter;

 import org.springextensions.actionscript.ioc.IObjectDefinition;
 import org.springextensions.actionscript.ioc.factory.support.ObjectDefinitionBuilder;
 import org.springextensions.actionscript.ioc.factory.xml.parser.support.ParsingUtils;
 import org.springextensions.actionscript.ioc.factory.xml.parser.support.XMLObjectDefinitionsParser;

 public class DateFormatterNodeParser extends AbstractObjectDefinitionParser {

  public function DateFormatterNodeParser() {
   super();
  }

  override protected function parseInternal(node:XML, context:XMLObjectDefinitionsParser):IObjectDefinition {
   var result:ObjectDefinitionBuilder = ObjectDefinitionBuilder.objectDefinitionForClass(DateFormatter);

   ParsingUtils.mapProperties(result.objectDefinition, node, "format-string");

   return result.objectDefinition;

  }

 }
}</programlisting>

    <orderedlist>
      <listitem>
        <para>We use the SpringActionscript-provided <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.AbstractObjectDefinitionParser">AbstractObjectDefinitionParser</literal>
        to handle a lot of the basic grunt work of creating a single <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.IObjectDefinition">IObjectDefinition</literal>.</para>
      </listitem>

      <listitem>
        <para>We supply the <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.AbstractObjectDefinitionParser">AbstractObjectDefinitionParser</literal>
        superclass with the type that our single <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.IObjectDefinition">IObjectDefinition</literal>
        will represent.</para>
      </listitem>

      <listitem>
        <para>We use the SpringActionscript-provided <literal
        xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.parser.support.ParsingUtils">ParsingUtils</literal>
        to automatically map <abbrev>XML</abbrev> attributes to object
        properties.</para>
      </listitem>
    </orderedlist>

    <para>In this simple case, this is all that we need to do. The creation of
    our single <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.IObjectDefinition">IObjectDefinition</literal>
    is handled by the <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.AbstractObjectDefinitionParser">AbstractObjectDefinitionParser</literal>
    superclass, as is the extraction and setting of the object definition's
    unique identifier.</para>
  </section>

  <section xml:id="registering_the_handler">
    <title>Registering the handler</title>

    <para>The coding is finished! All that remains to be done is to somehow
    make the Spring Actionscript <abbrev>XML</abbrev> parsing infrastructure
    aware of our custom element. For this particular task you can simply call
    the <literal
    xlink:href="asdoc://org.springextensions.actionscript.context.support.XMLApplicationContext#addNamespaceHandler()">addNamespaceHandler()</literal>
    method on the application context instance, passing it an instance of your
    newly created <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.INamespaceHandler">INamespaceHandler</literal>.</para>

    <programlisting>applicationContext.addNamespaceHandler(new MyNamespaceHandler());</programlisting>

    <para>And that's it, if you make sure you've declared your own namespace
    properly in the <abbrev>XML</abbrev> configuration, from now on the Spring
    Actionscript container will be able to parse and create your object
    definitions.</para>

    <note>
      <para>Obviously you must invoke the addNameSpaceHandler() method
      <emphasis>before</emphasis> you invoke the load() method.</para>
    </note>
  </section>

  <section xml:id="code_generator">
    <title>Code generator</title>

    <para>Spring Actionscript offers a small <abbrev>AIR</abbrev> application
    (whose source can also be found in the 'samples' section of the SVN
    repository). This application can load and analyze a .swc file, extract
    class information and based on this generate a namespace, a <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.NamespaceHandlerSupport">NamespaceHandlerSupport</literal>
    subclass, a list of <literal
    xlink:href="asdoc://org.springextensions.actionscript.ioc.factory.xml.IObjectDefinitionParser">IObjectDefinitionsParsers</literal>
    and a schema file.</para>

    <para>Obviously this code generator will not be suitable for more complex
    implementations, but it can at least provide you with some boiler plate
    code and give you a better insight in the workings and dependencies of the
    different classes.</para>

    <para>You can download the AIR installer by <literal
    xlink:href="local://binary/ObjectDefinitionParserBuilder.air"
    xlink:title="Object Definition Parser Builder - A Spring Actionscript Code Generator">clicking
    this link</literal>.</para>
  </section>
</appendix>
